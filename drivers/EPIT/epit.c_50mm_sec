/*
 *  linux/arch/arm/plat-mxc/epit.c
 *
 *  Copyright (C) 2010 Sascha Hauer <s.hauer@pengutronix.de>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 */

#define EPITCR		0x00
#define EPITSR		0x04
#define EPITLR		0x08
#define EPITCMPR	0x0c
#define EPITCNR		0x10

#define EPITCR_EN			(1 << 0)
#define EPITCR_ENMOD			(1 << 1)
#define EPITCR_OCIEN			(1 << 2)
#define EPITCR_RLD			(1 << 3)
#define EPITCR_PRESC(x)			(((x) & 0xfff) << 4)
#define EPITCR_SWR			(1 << 16)
#define EPITCR_IOVW			(1 << 17)
#define EPITCR_DBGEN			(1 << 18)
#define EPITCR_WAITEN			(1 << 19)
#define EPITCR_RES			(1 << 20)
#define EPITCR_STOPEN			(1 << 21)
#define EPITCR_OM_DISCON		(0 << 22)
#define EPITCR_OM_TOGGLE		(1 << 22)
#define EPITCR_OM_CLEAR			(2 << 22)
#define EPITCR_OM_SET			(3 << 22)
#define EPITCR_CLKSRC_OFF		(0 << 24)
#define EPITCR_CLKSRC_PERIPHERAL	(1 << 24)
#define EPITCR_CLKSRC_REF_HIGH		(1 << 25) //analogic
#define EPITCR_CLKSRC_REF_LOW		(3 << 24)

#define EPITSR_OCIF			(1 << 0)

#include <linux/interrupt.h>
#include <linux/irq.h>
#include <linux/clockchips.h>
#include <linux/clk.h>
#include <linux/err.h>
#include <asm/mach/time.h>

#include "common.h"
#include "hardware.h"


#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/of.h>
#include <linux/of_device.h>
#include <linux/of_dma.h>
#include <linux/platform_data/i2c-imx.h>
#include <linux/platform_device.h>
#include <linux/sched.h>
#include <linux/slab.h>
#include <linux/mfd/syscon.h>
#include <linux/regmap.h>
#include <linux/reboot.h>
#include <linux/printk.h>
#include <linux/of_irq.h>
#include <linux/of_address.h>
#include <linux/clk.h>
#include <linux/time.h>
#include "Am335x_gpio.h"
#include <linux/sched_clock.h>

//############################################################

#define gpio_epit     GPIO_TO_PIN(0,4) //MX6UL_PAD_GPIO1_IO04__GPIO1_IO04
#define Set(X,V) gpio_set_value(X,V) //MX6UL_PAD_UART3_RX_DATA__GPIO1_IO25

static int E1_V,E2_V,IN1_V,IN2_V;
//STEPPER MOTOR FOR DRV8833 BY RAKESH ANALOGICS
#define ENA1     GPIO_TO_PIN(0, 26) //MX6UL_PAD_UART3_CTS_B__GPIO1_IO26
#define ENA2     GPIO_TO_PIN(1, 8) //MX6UL_PAD_ENET2_RX_DATA0__GPIO2_IO08
#define IN1      GPIO_TO_PIN(1, 9) //MX6UL_PAD_ENET2_RX_DATA1__GPIO2_IO09
#define IN2      GPIO_TO_PIN(0, 27) //MX6UL_PAD_UART3_RTS_B__GPIO1_IO27

#define PRN_PW  GPIO_TO_PIN(3,  20) //MX6UL_PAD_CSI_HSYNC__GPIO4_IO20


//##############################################################

static struct clock_event_device clockevent_epit;
static enum clock_event_mode clockevent_mode = CLOCK_EVT_MODE_UNUSED;//analogics
//static enum clock_event_mode clockevent_mode = CLOCK_EVT_MODE_ONESHOT;
static void __iomem *timer_base;

static inline void epit_irq_disable(void)
{
	u32 val;

	val = __raw_readl(timer_base + EPITCR);
	val &= ~EPITCR_OCIEN;
	__raw_writel(val, timer_base + EPITCR);
}

static inline void epit_irq_enable(void)
{
	u32 val;

	val = __raw_readl(timer_base + EPITCR);
	val |= EPITCR_OCIEN;
	__raw_writel(val, timer_base + EPITCR);
}

static void epit_irq_acknowledge(void)
{
	//static int k;	
	__raw_writel(EPITSR_OCIF, timer_base + EPITSR);
	//printk("epit_irq_acknowledge = %d" ,k+1);
}
static int __init epit_clocksource_init(struct clk *timer_clk)
{
	unsigned int c = clk_get_rate(timer_clk);
	 void __iomem *reg = timer_base + EPITCNR ;
	printk("clk_get_rate =%d ",c);

	return clocksource_mmio_init(reg, "epit", c, 200, 32,
			clocksource_mmio_readl_down);

/*	return clocksource_mmio_init(timer_base + EPITCNR, "epit", c, 200, 32,
			clocksource_mmio_readl_down);*/
}

/* clock event */

static int epit_set_next_event(unsigned long evt,
			      struct clock_event_device *unused)
{
	unsigned long tcmp;

	tcmp = __raw_readl(timer_base + EPITCNR);
	printk("epit_set_next_event is called");

	__raw_writel(tcmp - evt, timer_base + EPITCMPR);

	return 0;
}

static void epit_set_mode(enum clock_event_mode mode,
				struct clock_event_device *evt)
{
	unsigned long flags;
	//mode = CLOCK_EVT_MODE_ONESHOT;

	/*
	 * The timer interrupt generation is disabled at least
	 * for enough time to call epit_set_next_event()
	 */
	local_irq_save(flags);

	/* Disable interrupt in GPT module */
	epit_irq_disable();
	//printk("mode  =%x ,clockevent_mode =%x", mode,clockevent_mode);
	if (mode != clockevent_mode) {
		/* Set event time into far-far future */

		/* Clear pending interrupt */
		epit_irq_acknowledge();
	}

	/* Remember timer mode */
	clockevent_mode = mode;
	local_irq_restore(flags);
	printk("EPIT _mode  =%x ,clockevent_mode =%x\n", mode,clockevent_mode);
	switch (mode) {
	case CLOCK_EVT_MODE_PERIODIC:
		printk(KERN_ERR "epit_set_mode: Periodic mode is not "
				"supported for i.MX EPIT\n");
		break;
	case CLOCK_EVT_MODE_ONESHOT:
	/*
	 * Do not put overhead of interrupt enable/disable into
	 * epit_set_next_event(), the core has about 4 minutes
	 * to call epit_set_next_event() or shutdown clock after
	 * mode switching
	 */
		local_irq_save(flags);
		printk("\n epit_irq_enable \n");
		epit_irq_enable();
		local_irq_restore(flags);
		break;
	case CLOCK_EVT_MODE_SHUTDOWN:
	case CLOCK_EVT_MODE_UNUSED:
	case CLOCK_EVT_MODE_RESUME:
		/* Left event sources disabled, no more interrupts appear */
		break;
	}
}

/*
 * IRQ handler for the timer
 */
static irqreturn_t epit_timer_interrupt(int irq, void *dev_id)
{
	struct clock_event_device *evt = &clockevent_epit;
	static int value,STEP,count;
	epit_irq_acknowledge();
	//static int STEP;
	evt->event_handler(evt);
	switch(STEP)
	{
		case 0:E1_V=1;E2_V=0;IN1_V=0;IN2_V=1;STEP=1;break;
		case 1:E1_V=1;E2_V=1;IN1_V=0;IN2_V=1;STEP=2;break;

		case 2:E1_V=0;E2_V=1;IN1_V=0;IN2_V=1;STEP=3;break;
		case 3:E1_V=0;E2_V=1;IN1_V=1;IN2_V=1;STEP=4;break;

		case 4:E1_V=0;E2_V=1;IN1_V=1;IN2_V=0;STEP=5;break;
		case 5:E1_V=1;E2_V=1;IN1_V=1;IN2_V=0;STEP=6;break;

		case 6:E1_V=1;E2_V=0;IN1_V=1;IN2_V=0;STEP=7;break;
		case 7:E1_V=1;E2_V=0;IN1_V=1;IN2_V=1;STEP=0;break;

	}
	Set(ENA1,E1_V); Set(ENA2,E2_V); Set(IN1,IN1_V); Set(IN2,IN2_V);
	if(count==14999){
		__raw_writel(0x00000000, timer_base + EPITCR);
		Set(PRN_PW,0);
		E1_V=0;E2_V=0;IN1_V=0;IN2_V=0;
		count=0;
	}else{
		count=count+1;
	}
	//value=gpio_get_value(gpio_epit);	
	//	printk("STEP=%d\n",STEP);
	/*if(value==1)
	  {
	  Set(gpio_epit,0);
	  value = 0;
	  }else{
	  Set(gpio_epit,1);
	  value = 1 ;
	  }*/
	//Set(gpio_epit,0);
	//Set(gpio_epit,1);
	return IRQ_HANDLED;
}

static struct irqaction epit_timer_irq = {
	.name		= "i.MX EPIT Timer Tick",
	.flags		= IRQF_TIMER | IRQF_IRQPOLL,
	.handler	= epit_timer_interrupt,
};

static struct clock_event_device clockevent_epit = {
	.name		= "epit",
	.features	= CLOCK_EVT_FEAT_ONESHOT,
	.set_mode	= epit_set_mode,
	.set_next_event	= epit_set_next_event,
	.rating		= 200,
};

static int __init epit_clockevent_init(struct clk *timer_clk)
{
	clockevent_epit.cpumask = cpumask_of(0);
	clockevents_config_and_register(&clockevent_epit,
					clk_get_rate(timer_clk),
					0x800, 0xfffffffe);

	return 0;
}

static int  epit_probe(struct platform_device *pdev)
{
	 // struct regmap *epit;
          int irq;
	  struct device_node *ep;
	 struct clk *timer_clk;	

        /* Get SNVS register Page */
        ep = pdev->dev.of_node;
        if (!ep)
                return -ENODEV;
	timer_base = of_iomap(ep, 0);
        WARN_ON(!timer_base);
        irq = irq_of_parse_and_map(ep, 0);
	printk("epit->irq =%d",irq);

        timer_clk = of_clk_get_by_name(ep, "perclk");

	clk_prepare_enable(timer_clk);
	Gpio_set_value(gpio_epit,"gpio_epit",1,0);
	 Gpio_set_value(IN1 ,"MTA",1,0);
//	printk("IN1 Ret=%d\n",Ret);
       	Gpio_set_value(IN2 ,"MTA1",1,0);
//	printk("IN2 Ret=%d\n",Ret);
        Gpio_set_value(ENA1,"MTB",1,0);
	//printk("ENA1 Ret=%d\n",Ret);
        Gpio_set_value(ENA2,"MTB1",1,0);
	Gpio_set_value(PRN_PW,"VH",1,1);


	//Set(gpio_epit,1);
	/*
	 * Initialise to a known state (all timers off, and timing reset)
	 */
	__raw_writel(0x0000000a, timer_base + EPITCR);
	printk("\n EPITLR = %x\n" ,  __raw_readl(timer_base + EPITLR));
	__raw_writel(0x00003A98, timer_base + EPITLR);
	printk("\n EPITCNR = %x\n" ,  __raw_readl(timer_base + EPITCNR));
	__raw_writel(0x00000000, timer_base + EPITCMPR);
/*	__raw_writel(EPITCR_EN | EPITCR_CLKSRC_REF_HIGH | EPITCR_WAITEN |EPITCR_IOVW | EPITCR_OM_TOGGLE |EPITCR_RLD | EPITCR_OCIEN | EPITCR_ENMOD,
			timer_base + EPITCR);*/
	__raw_writel(EPITCR_EN | EPITCR_OCIEN | EPITCR_CLKSRC_PERIPHERAL | EPITCR_WAITEN | EPITCR_OM_CLEAR | EPITCR_RLD  | EPITCR_ENMOD | EPITCR_IOVW ,timer_base + EPITCR);

	printk("\n EPITCR = %x\n" ,  __raw_readl(timer_base + EPITCR));
	/* init and register the timer to the framework */
	epit_clocksource_init(timer_clk);
	epit_clockevent_init(timer_clk);

	/* Make irqs happen */
	setup_irq(irq, &epit_timer_irq);


//printk("EPIT >>>>>>>>>>> probing");
//	epit_timer_init(epit,irq);
return 0;
}
//int epit_timer(int delay,int STEP)
int epit_timer(void)
{

	/*switch(int STEP)
	{
		case 1:E1_V=1;E2_V=0;IN1_V=0;IN2_V=1;
                case 2:E1_V=1;E2_V=1;IN1_V=0;IN2_V=1;
	
                case 3:E1_V=0;E2_V=1;IN1_V=0;IN2_V=1;
                case 4:E1_V=0;E2_V=1;IN1_V=1;IN2_V=1;

                case 5:E1_V=0;E2_V=1;IN1_V=1;IN2_V=0;
                case 6:E1_V=1;E2_V=1;IN1_V=1;IN2_V=0;
	
                case 7:E1_V=1;E2_V=0;IN1_V=1;IN2_V=0;
                case 8:E1_V=1;E2_V=0;IN1_V=1;IN2_V=1;

	}*/

	__raw_writel(0x0000000a, timer_base + EPITCR);
	//printk("\n EPITLR = %x\n" ,  __raw_readl(timer_base + EPITLR));
	__raw_writel(0x00003A98, timer_base + EPITLR);
	//printk("\n EPITCNR = %x\n" ,  __raw_readl(timer_base + EPITCNR));
	__raw_writel(0x00000000, timer_base + EPITCMPR);
	__raw_writel(EPITCR_EN | EPITCR_OCIEN | EPITCR_CLKSRC_PERIPHERAL | EPITCR_WAITEN | EPITCR_OM_CLEAR | EPITCR_RLD  | EPITCR_ENMOD | EPITCR_IOVW ,timer_base + EPITCR);
}
EXPORT_SYMBOL_GPL(epit_timer);
static int epit_remove(struct platform_device *pdev)
{
return 0; 
}

static const struct of_device_id epit_match_table[] = {
		{.compatible = "Analogics,EPIT", },
		{ },
};
MODULE_DEVICE_TABLE(of, epit_match_table);

static struct platform_driver EpitDriver = {

        .driver = {
                .name   = "Analogic-Epit",
                .owner  = THIS_MODULE,
		.of_match_table = of_match_ptr(epit_match_table),
        },
	.probe = epit_probe,
	//.remove = __devexit_p(thprn_remove),
	.remove = epit_remove,
        
};


static int __init epit_imx_init(void)
{
	return platform_driver_register(&EpitDriver);
}
subsys_initcall(epit_imx_init);

static void __exit epit_imx_exit(void)
{
	platform_driver_unregister(&EpitDriver);
}
module_exit(epit_imx_exit);


MODULE_LICENSE("GPL");
MODULE_AUTHOR("RAKESH");
MODULE_DESCRIPTION("Epit Module");
MODULE_VERSION("Ver 0.1");

